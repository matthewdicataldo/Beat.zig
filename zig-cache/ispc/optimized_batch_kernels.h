//
// zig-cache/ispc/optimized_batch_kernels.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>

#if !defined(__cplusplus)
#if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)
#include <stdbool.h>
#else
typedef int bool;
#endif
#endif



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void ispc_fingerprint_mega_batch(uint64_t * fingerprints_a_low, uint64_t * fingerprints_a_high, uint64_t * fingerprints_b_low, uint64_t * fingerprints_b_high, float * task_priorities, float * similarities, float * compatibility_scores, int32_t * classifications, uint32_t * hashes, int32_t count);
    extern void ispc_generic_float_transform(float * input_data, float * output_data, int32_t operation_type, float param1, float param2, int32_t count);
    extern float ispc_generic_reduction(float * data, int32_t operation_type, int32_t count);
    extern void ispc_prediction_mega_batch(float * raw_values, float * timestamps, float * filtered_values, float * confidence_scores, float * prediction_scores, float * worker_loads, float * numa_distances, int32_t count);
    extern void ispc_similarity_matrix_mega_optimized(uint64_t * fingerprints_low, uint64_t * fingerprints_high, float * similarity_matrix, int32_t count);
    extern void ispc_streaming_fingerprint_processor(uint64_t * input_stream_low, uint64_t * input_stream_high, float * output_stream, int32_t stream_length, int32_t window_size);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
