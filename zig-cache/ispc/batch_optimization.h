//
// zig-cache/ispc/batch_optimization.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>

#if !defined(__cplusplus)
#if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)
#include <stdbool.h>
#else
typedef int bool;
#endif
#endif



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void ispc_classify_tasks_for_batching(float * computational_intensity, float * memory_access_patterns, float * data_dependencies, int32_t * task_classes, int32_t count);
    extern int32_t ispc_optimize_batch_formation(float * task_scores, float * similarity_matrix, int32_t * batch_indices, int32_t count, int32_t max_batch_size);
    extern void ispc_score_batch_candidates(float * task_complexities, float * memory_requirements, float * cache_localities, float * numa_affinities, float * batch_scores, int32_t count);
    extern void ispc_validate_batch_performance(float * task_execution_times, float * memory_footprints, int32_t * batch_indices, int32_t batch_size, float * total_execution_time, float * peak_memory_usage, float * cache_efficiency);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
