//
// zig-cache/ispc/worker_selection.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>

#if !defined(__cplusplus)
#if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)
#include <stdbool.h>
#else
typedef int bool;
#endif
#endif



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void ispc_compute_load_balance_scores(float * current_loads, float * predicted_loads, float * migration_costs, float * balance_scores, int32_t worker_count);
    extern void ispc_compute_worker_scores(float * worker_loads, float * numa_distances, float * cache_affinities, float * worker_scores, int32_t worker_count);
    extern void ispc_profile_worker_performance(uint64_t * task_completion_times, uint64_t * cache_miss_counts, uint64_t * context_switch_counts, float * performance_scores, int32_t worker_count, int32_t time_window_size);
    extern int32_t ispc_select_steal_victims(float * worker_queue_sizes, int32_t * numa_distances, float * steal_success_rates, int32_t * victim_preferences, int32_t worker_count, int32_t max_victims);
    extern void ispc_topology_aware_selection(float * worker_loads, int32_t * numa_nodes, int32_t * cpu_cores, float task_memory_intensity, int32_t preferred_numa_node, float * topology_scores, int32_t worker_count);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
