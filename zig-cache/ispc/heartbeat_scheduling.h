//
// zig-cache/ispc/heartbeat_scheduling.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>

#if !defined(__cplusplus)
#if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)
#include <stdbool.h>
#else
typedef int bool;
#endif
#endif



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void ispc_accumulate_predicted_tokens(float * predicted_cycles, float * confidence_scores, float * base_costs, float * accumulated_tokens, float * confidence_weighted_tokens, float * uncertainty_penalties, int32_t count);
    extern void ispc_adapt_memory_pressure(float * memory_levels, float * worker_loads, float * numa_distances, float * adaptation_factors, float * batch_size_limits, float * memory_scores, int32_t worker_count);
    extern void ispc_compute_load_balance_targets(float * current_loads, float * predicted_incoming, float * worker_capacities, float * numa_preferences, float * target_loads, float * balance_scores, float * redistribution_amounts, int32_t worker_count);
    extern void ispc_compute_numa_distances(int32_t * numa_nodes_a, int32_t * numa_nodes_b, float * base_distances, float * memory_bandwidths, float * topology_scores, float * migration_costs, int32_t pair_count);
    extern void ispc_compute_worker_ratios(uint64_t * work_cycles, uint64_t * overhead_cycles, float * work_ratios, float * efficiency_scores, float * adaptive_thresholds, int32_t worker_count);
    extern void ispc_process_worker_heartbeats(uint64_t * work_cycles, uint64_t * overhead_cycles, uint64_t * promotion_thresholds, uint64_t * min_work_cycles, bool * should_promote, bool * needs_reset, int32_t worker_count);
    extern void ispc_update_prediction_accuracy(float * predicted_values, float * actual_values, float * timestamps, float * confidence_weights, float * accuracy_scores, float * temporal_factors, float * smoothed_accuracy, int32_t count);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
