//
// zig-cache/ispc/prediction_pipeline.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>

#if !defined(__cplusplus)
#if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)
#include <stdbool.h>
#else
typedef int bool;
#endif
#endif



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif

#ifndef __ISPC_STRUCT_MultiFactorConfidence__
#define __ISPC_STRUCT_MultiFactorConfidence__
struct MultiFactorConfidence {
    float sample_size_confidence;
    float accuracy_confidence;
    float temporal_confidence;
    float variance_confidence;
    float overall_confidence;
};
#endif

#ifndef __ISPC_STRUCT_PredictiveWorkEstimate__
#define __ISPC_STRUCT_PredictiveWorkEstimate__
struct PredictiveWorkEstimate {
    float estimated_cycles;
    float confidence;
    float expected_duration_ns;
    bool should_promote;
};
#endif

#ifndef __ISPC_STRUCT_SchedulingDecision__
#define __ISPC_STRUCT_SchedulingDecision__
struct SchedulingDecision {
    int32_t selected_worker;
    float decision_confidence;
    float expected_completion_time;
    bool use_work_stealing;
};
#endif

#ifndef __ISPC_STRUCT_OneEuroState__
#define __ISPC_STRUCT_OneEuroState__
struct OneEuroState {
    float x_prev;
    float dx_prev;
    float t_prev;
    bool initialized;
};
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void ispc_compute_multi_factor_confidence_batch(uint32_t * execution_counts, float * accuracy_scores, float * temporal_scores, float * variance_scores, struct MultiFactorConfidence * confidence_results, int32_t count);
    extern void ispc_compute_performance_metrics(float * execution_times, float * predicted_times, float * confidence_scores, float * accuracy_results, float * mean_error_results, float * confidence_calibration, int32_t count);
    extern void ispc_estimate_work_batch(uint64_t * fingerprints, float * base_predictions, float * confidence_scores, float * workload_factors, struct PredictiveWorkEstimate * work_estimates, int32_t count, float promotion_threshold);
    extern void ispc_generate_fingerprints_batch(uint32_t * task_sizes, uint32_t * memory_accesses, uint32_t * branch_counts, float * computation_ratios, uint64_t * fingerprint_results, int32_t count);
    extern void ispc_lookup_predictions_batch(uint64_t * fingerprint_hashes, float * cached_predictions, float * confidence_scores, bool * cache_hits, float * prediction_results, float * result_confidences, int32_t count, int32_t cache_size);
    extern void ispc_make_scheduling_decisions_batch(float * worker_scores, float * worker_loads, float * task_estimates, float * confidence_scores, struct SchedulingDecision * scheduling_decisions, int32_t task_count, int32_t worker_count, float load_balance_threshold);
    extern void ispc_process_one_euro_filter_batch(float * measurements, uint64_t * timestamps, struct OneEuroState * states, float * results, int32_t count, float dt_scale, float beta, float fc_min);
    extern void ispc_score_workers_batch(float * worker_loads, float * numa_distances, float * prediction_accuracies, float * worker_scores, int32_t worker_count, int32_t task_numa_preference);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
