//
// zig-cache/ispc/advanced_ispc_research.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>

#if !defined(__cplusplus)
#if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)
#include <stdbool.h>
#else
typedef int bool;
#endif
#endif



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern float ispc_advanced_simd_reduction(float * data, int32_t operation_type, int32_t count);
    extern void ispc_advanced_task_parallel_scheduling(uint64_t * work_cycles, uint64_t * overhead_cycles, bool * promotion_results, uint64_t total_workers, uint64_t task_chunk_size);
    extern void ispc_cache_optimized_batch_processing(float * worker_loads, float * prediction_accuracies, uint64_t * work_cycles, uint64_t * overhead_cycles, float * efficiency_scores, float time_delta, int32_t worker_count);
    extern void ispc_coherent_worker_communication(float * shared_state, float * local_computations, float * communication_matrix, int32_t worker_count);
    extern void ispc_cross_lane_load_balancing(float * worker_loads, float * target_loads, float * redistribution_matrix, int32_t worker_count);
    extern void ispc_gpu_optimized_worker_update(float * worker_states, float * time_deltas, float * update_factors, float * result_buffer, int32_t worker_count, int32_t state_dimensions);
    extern void ispc_short_vector_experiments(float * input_data, float * output_data, int32_t count);
    extern void ispc_zig_integration_prototype(float * zig_array, int32_t zig_array_length, float * ispc_result);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
