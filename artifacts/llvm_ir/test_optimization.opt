; Simple Souper optimization test
; This demonstrates patterns that Souper can discover and optimize

; Test 1: Basic redundant operation elimination
%0:i32 = var
%1:i32 = add %0, 0:i32
cand %1 %0

; Test 2: Multiplication by 1 elimination  
%2:i32 = var
%3:i32 = mul %2, 1:i32
cand %3 %2

; Test 3: XOR with self (always 0)
%4:i32 = var
%5:i32 = xor %4, %4
cand %5 0:i32

; Test 4: AND with all 1s (identity for 32-bit)
%6:i32 = var  
%7:i32 = and %6, 4294967295:i32
cand %7 %6

; Test 5: Bitwise clear lowest set bit optimization
%8:i32 = var
%9:i32 = sub %8, 1:i32
%10:i32 = and %8, %9
cand %10 %10  ; This pattern is already optimal